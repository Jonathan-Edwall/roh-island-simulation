} else {
overlapping_phenotypes$Hotspot_Overlap_Perc <- numeric(0)  # Empty case
}
# Store results
empirical_hotspot_tables[[i]][["Hotspot_phenotypes"]] <- overlapping_phenotypes
}
##################################################################################################
### Step 2: Show all non-defect (non-disease-related) phenotypes overlapping with the candidate regions for selection
##################################################################################################
All_phenotypes_hotspots_under_selection <- list()
# Sorting in alphanumerical order
hotspots_under_selection <- under_selection_rows[order(under_selection_rows$Name), ]
# Loop through each hotspot and filter under selection
for (hotspot in names(empirical_hotspot_tables)) {
for (selection_hotspot_index in 1:nrow(hotspots_under_selection)) {
if (tolower(hotspot) == tolower(hotspots_under_selection$Name[selection_hotspot_index])) {
# Extract the phenotypes for the selected hotspot
phenotypes_data <- empirical_hotspot_tables[[hotspot]][["Hotspot_species_phenotypes"]]
# Append to the list if phenotypes are found
if (!is.null(phenotypes_data) && nrow(phenotypes_data) > 0) {
All_phenotypes_hotspots_under_selection[[hotspot]] <- phenotypes_data
}
}
}
}
cat("\n\n**The following Vertebrate Breed Ontology (VBO) ID(s) were used to map phenotypes from OMIA with each candidate region for selection:** ", vertebrate_breed_ontology_ids)
cat("\n\n**The following OMIA phenotype file was used to map phenotypes to the empirical candidate region(s) for selection:**", omia_phenotypes_filepath)
# Check if there are any phenotypes under selection and display a message with the tables
if (length(All_phenotypes_hotspots_under_selection) > 0) {
# Print a phenotyperal message before displaying tables
# cat("\n### Phenotypes for Hotspot regions whom are candidates for Selection\n")
cat("\n\nThe following table(s) display the phenotypes overlapping with the ROH hotspot candidate region(s) for selection, in the following order:",hotspots_under_selection$Name,"\n\n")
# Display the entire table for all hotspots
knitr::kable(All_phenotypes_hotspots_under_selection, row.names = FALSE,
caption = "All phenotypes (for the studied species) overlapping with the hotspots under selection")
# Display the entire table of all Non-Defect (Non-Disease-Related) Phenotypes overlapping with the candidate regions for selection, by generating a list of kable tables
All_phenotypes_hotspots_under_selection_tables_list <- lapply(All_phenotypes_hotspots_under_selection, function(df) {
if (nrow(df) > 0) {
kable(df, format = kable_table_formatting, padding = kable_table_padding,row.names = FALSE, digits = kable_table_digits)     }
})
# Print the tables stacked vertically
kables(All_phenotypes_hotspots_under_selection_tables_list,
caption = "Table showing all Non-Defect phenotypes from OMIA, overlapping with the candidate region(s) for selection, ")
} else {
cat("\n\n**Result:**\n\nNo Non-Defect (Non-Disease-Related) phenotypes were discovered for the ROH hotspot candidate region(s) for selection \n")
}
# Initialize an empty data frame to store the results
results_df <- data.frame()
hotspot_avg_H_e <- c()
hotspot_under_selection <- c()
hotspot_lengths_mb <- c()
hotspot_names <- c()
hotspot_avg_roh_freq <- c()
for (i in seq_along(empirical_hotspot_tables)) {
hotspot_name <- names(empirical_hotspot_tables)[i]
if (tolower(hotspot_name) %in% tolower(under_selection_rows$Name)) {
matching_row <- Selection_testing_results[tolower(Selection_testing_results$Name) == tolower(hotspot_name), ]
hotspot_avg_H_e <- c(hotspot_avg_H_e,matching_row$Window_based_Average_H_e)
# hotspot_under_selection <- matching_row$Under_selection
hotspot_under_selection <- c(hotspot_under_selection,matching_row$Under_selection)
capitalized_hotspot_name <- paste0(toupper(substring(hotspot_name, 1, 1)), substring(hotspot_name, 2))
hotspot_length_mb <- empirical_hotspot_tables[[i]][["Hotspot_length_Mb"]]
hotspot_lengths_mb <- c(hotspot_lengths_mb,hotspot_length_mb)
hotspot_names <- c(hotspot_names,capitalized_hotspot_name)
hotspot_avg_freq <- empirical_hotspot_tables[[i]][["Avg_frequency"]]
hotspot_avg_roh_freq <- c(hotspot_avg_roh_freq,hotspot_avg_freq)
} else {
}
}
# Scaling to percentage
hotspot_avg_roh_freq <- 100*hotspot_avg_roh_freq
causative_variant_windows_he <- subset(H_e_values, Model != "Neutral")
selection_coefficient_variant_windows_length_mb <- causative_variant_window_results_df$Length_Mb
selection_coefficient_variant_windows_length_mb_lower_ci <- causative_variant_window_results_df$Length_lower_CI
selection_coefficient_variant_windows_length_mb_upper_ci <- causative_variant_window_results_df$Length_Upper_CI
selection_coefficient_variant_windows_ROH_freq <- causative_variant_window_results_df$ROH_freq
selection_coefficient_variant_windows_ROH_freq_lower_ci <- causative_variant_window_results_df$ROH_freq_lower_CI
selection_coefficient_variant_windows_ROH_freq_upper_ci <- causative_variant_window_results_df$ROH_freq_upper_CI
selection_coefficient_variant_windows_avg_H_e <- causative_variant_window_results_df$Avg_H_e
selection_coefficient_variant_windows_H_e_lower_ci <- causative_variant_window_results_df$H_e_lower_CI
selection_coefficient_variant_windows_H_e_upper_ci <- causative_variant_window_results_df$H_e_upper_CI
selection_coefficient_name <- causative_variant_window_results_df$Sel.coeff
empirical_na <- NA
# Combine all values into a data frame
Hotspots_and_Causative_windows_comparison <- data.frame(
Model = c(hotspot_names, selection_coefficient_name),
Lengths_Mb = c(hotspot_lengths_mb, selection_coefficient_variant_windows_length_mb),
Length_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_length_mb_lower_ci),
Length_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_length_mb_upper_ci),
ROH_Freq = c(hotspot_avg_roh_freq, selection_coefficient_variant_windows_ROH_freq),
ROH_freq_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_ROH_freq_lower_ci),
ROH_freq_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_ROH_freq_upper_ci),
H_e = c(hotspot_avg_H_e, selection_coefficient_variant_windows_avg_H_e),
H_e_lower_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_H_e_lower_ci),
H_e_upper_ci = c(rep(NA, length(hotspot_names)), selection_coefficient_variant_windows_H_e_upper_ci)
)
Hotspots_and_Causative_windows_comparison$ROH_Freq <- round(Hotspots_and_Causative_windows_comparison$ROH_Freq,ROH_frequency_decimals)
Hotspots_and_Causative_windows_comparison$H_e <- round(Hotspots_and_Causative_windows_comparison$H_e,H_e_values_decimals)
Hotspots_and_Causative_windows_comparison$Lengths_Mb <- round(Hotspots_and_Causative_windows_comparison$Lengths_Mb,Window_lengths_decimals)
# Sort the data frame based on the 'Model' column in descending order
Hotspots_and_Causative_windows_comparison_sorted <- Hotspots_and_Causative_windows_comparison[order(Hotspots_and_Causative_windows_comparison$Model, decreasing = TRUE), ]
# Now, create a new data frame with confidence intervals as tuples
Hotspots_and_Causative_windows_CI_tuples <- data.frame(
Model = Hotspots_and_Causative_windows_comparison$Model,
Lengths_Mb = Hotspots_and_Causative_windows_comparison$Lengths_Mb,
Length_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$Length_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$Length_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$Length_upper_ci, ")")),
ROH_Freq = Hotspots_and_Causative_windows_comparison$ROH_Freq,
ROH_Freq_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$ROH_freq_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$ROH_freq_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$ROH_freq_upper_ci, ")")),
H_e = Hotspots_and_Causative_windows_comparison$H_e,
H_e_CI = ifelse(is.na(Hotspots_and_Causative_windows_comparison$H_e_lower_ci), NA,
paste0("(", Hotspots_and_Causative_windows_comparison$H_e_lower_ci, ", ", Hotspots_and_Causative_windows_comparison$H_e_upper_ci, ")"))
)
# Sort the new data frame with tuples based on the 'Model' column in descending order
Hotspots_and_Causative_windows_CI_tuples_sorted <- Hotspots_and_Causative_windows_CI_tuples[order(Hotspots_and_Causative_windows_CI_tuples$Model, decreasing = TRUE), ]
Hotspots_and_Causative_windows_CI_tuples_sorted$Model <- gsub("_", "\\_", Hotspots_and_Causative_windows_CI_tuples_sorted$Model, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$Length_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$Length_CI, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$ROH_Freq_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$ROH_Freq_CI, fixed = TRUE)
Hotspots_and_Causative_windows_CI_tuples_sorted$H_e_CI <- gsub(",", "\\,", Hotspots_and_Causative_windows_CI_tuples_sorted$H_e_CI, fixed = TRUE)
# Define the filename for the new data frame with CI tuples
filename_tuples <- file.path(output_dir, paste("ROH_Hotspots_and_Causative_Windows_comparison",".csv", sep = ""))
# Write the new sorted data frame to CSV file without quotes
write.table(Hotspots_and_Causative_windows_CI_tuples_sorted, file = filename_tuples, sep = ",", row.names = FALSE, quote = FALSE)
kable(Hotspots_and_Causative_windows_comparison_sorted, row.names = FALSE)
# View(causative_variant_window_results_df)
# # Comparison Sorted after the different metrics
#  kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$Lengths_Mb), ])
#  kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$ROH_Freq), ])
#  kable(Hotspots_and_Causative_windows_comparison[order(-Hotspots_and_Causative_windows_comparison$H_e), ])
setwd(output_dir)
add_2d_shadows_to_3d_plot <- TRUE
# add_2d_shadows_to_3d_plot <- FALSE
plot_title <- paste("ROH Hotspot(s) & Causative Windows comparison")
# Modify the labels by removing "Hotspot_" prefix and "_window" suffix from hotspot models
Hotspots_and_Causative_windows_comparison_sorted$Label <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
gsub("Hotspot_|_window", "", Hotspots_and_Causative_windows_comparison_sorted$Model),
Hotspots_and_Causative_windows_comparison_sorted$Model
)
# Removing the "s=" part from the selection coefficients for the plot display
Hotspots_and_Causative_windows_comparison_sorted$Label <- gsub("^s=", "", Hotspots_and_Causative_windows_comparison_sorted$Label)
# Create a new column for identifying the type
Hotspots_and_Causative_windows_comparison_sorted$Type <- ifelse(
grepl("Hotspot", Hotspots_and_Causative_windows_comparison_sorted$Model),
"Hotspot",
"Selection Coefficient"
)
# Generate a color palette for the hotspots
hotspot_models <- unique(Hotspots_and_Causative_windows_comparison_sorted$Model[Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot"])
num_hotspots <- length(hotspot_models)
# Choose the color palette based on the number of hotspots
if (num_hotspots == 2) {
color_palette_name <- "Set2"
} else {
color_palette_name <- "Set3"
}
# Get the colors for the hotspots
hotspot_colors <- setNames(brewer.pal(n = num_hotspots, name = color_palette_name), hotspot_models)
# Assign colors to each point
Hotspots_and_Causative_windows_comparison_sorted$Color <- ifelse(
Hotspots_and_Causative_windows_comparison_sorted$Type == "Hotspot",
hotspot_colors[Hotspots_and_Causative_windows_comparison_sorted$Model],
"blue"
)
x_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
x_axis_label <- "Avg ROH-frequency (%)"
y_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
y_axis_label <- "Length (Mb)"
z_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
z_axis_label <- "Avg H_e"
x_value <- Hotspots_and_Causative_windows_comparison_sorted$ROH_Freq
x_axis_label <- "Avg ROH-frequency (%)"
y_value <- Hotspots_and_Causative_windows_comparison_sorted$H_e
y_axis_label <- "Avg H_e"
z_value <- Hotspots_and_Causative_windows_comparison_sorted$Lengths_Mb
z_axis_label <- "Length (Mb)"
# # Create and save the 3D scatter plot as a PNG file
# png(filename = "3dplot_Hotspot_Causative_Window_Comparison.png", width = 1920, height = 1080, res = 300)
# png(filename = "3dplot_Hotspot_Causative_Window_Comparison.png",width = 800, height = 600, res = 300)
# Create the 3D scatter plot
s3d <- scatterplot3d(
x_value,
y_value,
z_value,
color = Hotspots_and_Causative_windows_comparison_sorted$Color,
pch = 19, # Solid circle
# pch = 20, # Solid circle
xlab = x_axis_label,
ylab = y_axis_label,
zlab = z_axis_label,
main = plot_title,
angle=65,
type = "h",
scale.y = 1,
axis = TRUE,
grid = TRUE,
box = TRUE,
# highlight.3d = TRUE
)
# Convert coordinates for adding labels
s3d.coords <- s3d$xyz.convert(
x_value,
y_value,
z_value
)
# Add labels to the original points
text(s3d.coords$x, s3d.coords$y,
labels = Hotspots_and_Causative_windows_comparison_sorted$Label,
pos = 2.5, cex = 0.5, font = 2) # pos=3 means above
# # Close the graphics device
# dev.off()
setwd(output_dir)
generate_H_e_plot <- function(hotspot_name, empirical_value) {
image_name <- paste0("Selection_strength_H_e_plot_", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste0(image_name, ".png"), width = 1920, height = 1080, res = 300)
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Avg_H_e,
Lower_CI = causative_variant_window_results_df$H_e_lower_CI,
Upper_CI = causative_variant_window_results_df$H_e_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = H_e_values_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("H_e Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "H_e",
color = "Hotspot Average H_e (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 0.001)  # Format y-axis to 3 decimal places
)
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
# Close the graphics device
dev.off()
}
display_H_e_plot <- function(hotspot_name, empirical_value) {
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Avg_H_e,
Lower_CI = causative_variant_window_results_df$H_e_lower_CI,
Upper_CI = causative_variant_window_results_df$H_e_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical H_e is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = H_e_values_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("H_e Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "H_e",
color = "Hotspot Average H_e (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 0.001)  # Format y-axis to 3 decimal places
)
# Print the plot
print(p)
# Print which models the empirical H_e is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("\n\n**Models where empirical H_e is within CI for", hotspot_name, ":**\n\n")
print(inside_models)
cat("\n\n**Models where empirical H_e is outside CI for", hotspot_name, ":**\n\n")
print(outside_models)
}
# Loop through each hotspot and generate plots
for (i in 1:nrow(under_selection_rows)) {
hotspot_name <- tools::toTitleCase(Selection_testing_results$Name[i])
empirical_value <- Selection_testing_results$Window_based_Average_H_e[i]
generate_H_e_plot(hotspot_name, empirical_value)
display_H_e_plot(hotspot_name, empirical_value)
}
setwd(output_dir)
generate_window_length_plot <- function(hotspot_name, empirical_value) {
image_name <- paste0("Selection_strength_window_lengths_plot_", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste0(image_name, ".png"), width = 1920, height = 1080, res = 300)
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Length_Mb,
Lower_CI = causative_variant_window_results_df$Length_lower_CI,
Upper_CI = causative_variant_window_results_df$Length_Upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical Window Length is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = Window_lengths_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Length (Mb) Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "Length (Mb)",
color = "Hotspot Window Length (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 1/(10^Window_lengths_decimals)))  # Format y-axis to 3 decimal places
# Print the plot
print(p)
# Close the graphics device
dev.off()
}
display_window_length_plot <- function(hotspot_name, empirical_value) {
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$Length_Mb,
Lower_CI = causative_variant_window_results_df$Length_lower_CI,
Upper_CI = causative_variant_window_results_df$Length_Upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical Window Length is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = Window_lengths_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("Length (Mb) Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "Length (Mb)",
color = "Hotspot Window Length (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 1/(10^Window_lengths_decimals)))  # Format y-axis to 3 decimal places
# Print the plot
print(p)
# Print which models the empirical Window Length is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("\n\n**Models where empirical Length is within CI for", hotspot_name, ":**\n\n")
print(inside_models)
cat("\n\n**Models where empirical Length is outside CI for", hotspot_name, ":**\n\n")
print(outside_models)
}
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- tools::toTitleCase(Hotspot_windows_sel_strength_test$Model[i])
empirical_value <- Hotspot_windows_sel_strength_test$Lengths_Mb[i]
generate_window_length_plot(hotspot_name, empirical_value)
display_window_length_plot(hotspot_name, empirical_value)
}
setwd(output_dir)
generate_roh_freq_plot <- function(hotspot_name, empirical_value) {
image_name <- paste0("Selection_strength_ROH_frequency_plot_", hotspot_name)
# Create and save the 3D scatter plot as a PNG file
png(filename = paste0(image_name, ".png"), width = 1920, height = 1080, res = 300)
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$ROH_freq,
Lower_CI = causative_variant_window_results_df$ROH_freq_lower_CI,
Upper_CI = causative_variant_window_results_df$ROH_freq_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical ROH-frequency is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = ROH_frequency_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("ROH-Frequency Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "ROH Freq (%)",
color = "Hotspot ROH Freq (%) (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 1/(10^ROH_frequency_decimals)))  # Format y-axis to 3 decimal places
# scale_y_continuous(limits = c(min_y, max_y),
#                    breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Close the graphics device
dev.off()
}
display_roh_freq_plot <- function(hotspot_name, empirical_value) {
plotting_data <- data.frame()
# Initialize plotting_data by directly selecting relevant columns from causative_variant_window_results_df
plotting_data <- data.frame(
sim_mean_value = causative_variant_window_results_df$ROH_freq,
Lower_CI = causative_variant_window_results_df$ROH_freq_lower_CI,
Upper_CI = causative_variant_window_results_df$ROH_freq_upper_CI,
Model = causative_variant_window_results_df$Sel.coeff
)
# Add a column indicating whether the empirical ROH-frequency is within the CI of each model
plotting_data$Empirical_Within_CI <- (plotting_data$Lower_CI <= empirical_value) & (plotting_data$Upper_CI >= empirical_value)
# cat(plotting_data$Empirical_Within_CI)
# print(plotting_data)
# Determine the y-axis limits
min_y <- min(c(plotting_data$Lower_CI, empirical_value))
max_y <- max(c(plotting_data$Upper_CI, empirical_value))
# Create the plot
p <- ggplot(plotting_data, aes(x = Model, y = sim_mean_value, color = Empirical_Within_CI)) +
geom_point(size = ROH_frequency_decimals) +
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
geom_hline(aes(yintercept = empirical_value), linetype = "dashed", color = "red", linewidth = 1, show.legend = TRUE) +
labs(title = paste("ROH-Frequency Comparison with CI:s - ", hotspot_name),
x = "Model",
y = "ROH Freq (%)",
color = "Hotspot ROH Freq (%) (Red) \nin relation to CI") +
scale_color_manual(values = c("TRUE" = "darkgreen", "FALSE" = "black"), labels = c("TRUE" = "Inside CI", "FALSE" = "Outside CI")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(
limits = c(min_y, max_y),
breaks = round(seq(min_y, max_y, length.out = 10), 5),
labels = scales::number_format(accuracy = 1/(10^ROH_frequency_decimals)))  # Format y-axis to 3 decimal places
# scale_y_continuous(limits = c(min_y, max_y),
#                    breaks = round(seq(min_y, max_y, length.out = 10), 5))
# Print the plot
print(p)
# Print which models the empirical ROH-frequency is inside of
inside_models <- plotting_data$Model[plotting_data$Empirical_Within_CI]
outside_models <- plotting_data$Model[!plotting_data$Empirical_Within_CI]
cat("\n\n**Models where empirical ROH-freq is within CI for", hotspot_name, ":**\n\n")
print(inside_models)
cat("\n\n**Models where empirical ROH-freq is outside CI for", hotspot_name, ":**\n\n")
print(outside_models)
}
Hotspot_windows_sel_strength_test <- Hotspots_and_Causative_windows_comparison[grepl("Hotspot", Hotspots_and_Causative_windows_comparison$Model), ]
# Loop through each hotspot and generate plots
for (i in 1:nrow(Hotspot_windows_sel_strength_test)) {
hotspot_name <- tools::toTitleCase(Hotspot_windows_sel_strength_test$Model[i])
empirical_value <- Hotspot_windows_sel_strength_test$ROH_Freq[i]
generate_roh_freq_plot(hotspot_name, empirical_value)
display_roh_freq_plot(hotspot_name, empirical_value)
}
View(omia_phenotype_data)
All_phenotypes_hotspots_under_selection
Breed_phenotypes_tables_flat
View(Breed_phenotypes_tables)
Breed_phenotypes_tables
View(Breed_phenotypes_tables[["VBO_0200800"]])
$Unspecified
View(Breed_phenotypes_tables[["Unspecified"]])
Breed_phenotypes_tables[[1]]
Breed_phenotypes_tables[[1]]
under_selection_rows
under_selection_rows[order(under_selection_rows$Name), ]
under_selection_rows[order(under_selection_rows$Name), ]
Selection_testing_results$Name[i]
Selection_testing_results$Name
Selection_testing_results$Window_based_Average_H_e[Selection_testing_results$Window_based_Average_H_e == , under_selection_rows[i]]
Selection_testing_results$Window_based_Average_H_e[Selection_testing_results$Window_based_Average_H_e == under_selection_rows[i], ]
Selection_testing_results[Selection_testing_results$Window_based_Average_H_e == under_selection_rows[i], ]
Selection_testing_results[Selection_testing_results$Window_based_Average_H_e == under_selection_rows[i], ]
Selection_testing_results[Selection_testing_results$Name == under_selection_rows[i], ]
Selection_testing_results
under_selection_rows[i]
under_selection_rows
under_selection_rows$Name[i]
Selection_testing_results[Selection_testing_results$Name == under_selection_rows$Name[i], ]
Hotspot_windows_sel_strength_test
Hotspot_windows_sel_strength_test
Hotspot_windows_sel_strength_test[order(Hotspot_windows_sel_strength_test$Window_based_Average_H_e), ]
Hotspot_windows_sel_strength_test[order(Hotspot_windows_sel_strength_test$H_e), ]
